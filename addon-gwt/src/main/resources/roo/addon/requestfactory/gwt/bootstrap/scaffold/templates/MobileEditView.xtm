package {{=packageName}};

import com.google.gwt.core.client.GWT;
import com.google.gwt.dom.client.DivElement;
import com.google.gwt.dom.client.Element;
import com.google.gwt.dom.client.Style.Display;
import com.google.gwt.editor.client.EditorError;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.shared.EventBus;
import com.google.web.bindery.requestfactory.gwt.client.RequestFactoryEditorDriver;
import com.google.web.bindery.requestfactory.shared.RequestFactory;
import com.google.gwt.safehtml.shared.SafeHtmlBuilder;
import com.google.gwt.text.shared.AbstractRenderer;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.uibinder.client.UiHandler;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.HTMLPanel;
import com.github.gwtbootstrap.client.ui.Button;
import com.github.gwtbootstrap.client.ui.CheckBox;
import com.github.gwtbootstrap.client.ui.DoubleBox;
import com.github.gwtbootstrap.client.ui.IntegerBox;
import com.github.gwtbootstrap.client.ui.LongBox;
import com.github.gwtbootstrap.client.ui.TextBox;
import com.github.gwtbootstrap.client.ui.ValueListBox;
import com.github.gwtbootstrap.client.ui.Button;
import com.github.gwtbootstrap.client.ui.AlertBlock;
import com.github.gwtbootstrap.datepicker.client.ui.DateBox;
import {{=scaffoldUiPackage}}.ui.*;

import {{=placePackage}}.ProxyEditView;
{{#imports}}import {{=import}};
{{/imports}}

import java.util.Collection;
import java.util.List;

/**
 * Edit view for {{=name}} proxys.
 */
public class {{=className}} extends Composite implements {{=editActivityWrapper}}.View<{{=className}}> {

	interface Binder extends UiBinder<HTMLPanel, {{=className}}> {
	}

	interface Driver extends
		RequestFactoryEditorDriver<{{=proxy}}, {{=className}}> {
	}

	private static final Binder BINDER = GWT.create(Binder.class);

	private static {{=className}} instance;

	public static {{=className}} instance() {
		if (instance == null) {
			instance = new {{=className}}();
		}
		return instance;
	}

	{{#editViewProps}}
	{{=prop}};{{/editViewProps}}
	@UiField Button save;
	@UiField DivElement errors;

	private Delegate delegate;

	public {{=className}}() {
		initWidget(BINDER.createAndBindUi(this));
	}

	@Override
	public RequestFactoryEditorDriver<{{=proxy}}, {{=className}}> createEditorDriver() {
		RequestFactoryEditorDriver<{{=proxy}}, {{=className}}> driver = GWT.create(Driver.class);
		driver.initialize(this);
		return driver;
	}

	{{#setEnumValuePickers}}
	{{=setValuePicker}}{{/setEnumValuePickers}}

	{{#setProxyValuePickers}}
	{{=setValuePicker}}{{/setProxyValuePickers}}

	public void setCreating(boolean creating) {
	}

	public void setDelegate(Delegate delegate) {
		this.delegate = delegate;
	}

	public void setEnabled(boolean enabled) {
		save.setEnabled(enabled);
	}

	public void showErrors(List<EditorError> errors) {
		SafeHtmlBuilder b = new SafeHtmlBuilder();
		for (EditorError error : errors) {
      b.appendEscaped(error.getPath()).appendEscaped(": ");
			b.appendEscaped(error.getMessage()).appendHtmlConstant("<br>");
		}
		this.errors.setInnerHTML(b.toSafeHtml().asString());
	}

	@UiHandler("save")
	void onSave(ClickEvent event) {
		delegate.saveClicked();
	}
}
