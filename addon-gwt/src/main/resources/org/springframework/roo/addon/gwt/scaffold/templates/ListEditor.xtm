package {{=packageName}};

import com.google.gwt.core.client.GWT;
import com.google.gwt.editor.client.Editor;
import com.google.gwt.editor.client.EditorDelegate;
import com.google.gwt.editor.client.LeafValueEditor;
import com.google.gwt.editor.client.ValueAwareEditor;
import com.google.gwt.editor.client.adapters.EditorSource;
import com.google.gwt.editor.client.adapters.ListEditor;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.shared.EventBus;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.web.bindery.requestfactory.gwt.client.RequestFactoryEditorDriver;
import com.google.gwt.resources.client.CssResource;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.uibinder.client.UiHandler;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.FlowPanel;
import com.google.gwt.user.client.ui.HTMLPanel;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.Widget;
import com.github.gwtbootstrap.client.ui.Button;
import com.github.gwtbootstrap.client.ui.ValueListBox;

import {{=scaffoldUiPackage}}.CollectionRenderer;
{{#imports}}import {{=import}};
{{/imports}}

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Displays an editor for a List of {{=proxy}} objects.
 */
public class {{=className}} extends Composite implements ValueAwareEditor<List<{{=proxy}}>>, LeafValueEditor<List<{{=proxy}}>> {

  interface Binder extends UiBinder<Widget, {{=className}}> {

  }

  interface Driver extends RequestFactoryEditorDriver<List<{{=proxy}}>, //
      ListEditor<{{=proxy}}, NameLabel>> {

  }

  class NameLabel extends Composite implements LeafValueEditor<{{=proxy}}> {

    final Label {{=primaryProp}}Editor = new Label();
    private {{=proxy}} proxy = null;

    public NameLabel() {
      this(null);
    }

    public NameLabel(final EventBus eventBus) {
      initWidget({{=primaryProp}}Editor);
    }

    public void setValue({{=proxy}} proxy) {
		this.proxy = proxy;
		{{=primaryProp}}Editor.setText({{=proxyRenderer}}.instance().render(proxy));
	}

	@Override
	public {{=proxy}} getValue() {
		return proxy;
	}
  }

  interface Style extends CssResource {

    String editorPanelHidden();

    String editorPanelVisible();

    String viewPanelHidden();

    String viewPanelVisible();
  }

  /**
   * This is used by a ListEditor.
   */
  private class NameLabelSource extends EditorSource<NameLabel> {

    @Override
    public NameLabel create(int index) {
      NameLabel label = new NameLabel();
      container.insert(label, index);
      return label;
    }

    @Override
    public void dispose(NameLabel subEditor) {
      subEditor.removeFromParent();
    }

    @Override
    public void setIndex(NameLabel editor, int index) {
      container.insert(editor, index);
    }
  }

  @UiField
  FlowPanel container;

  @UiField(provided = true)
  @Editor.Ignore
  ValueListBox<{{=proxy}}> picker
      = new ValueListBox<{{=proxy}}>(
      {{=proxyRenderer}}.instance(),
      new com.google.web.bindery.requestfactory.gwt.ui.client.EntityProxyKeyProvider<{{=proxy}}>());

  ;

  @UiField
  Button add;

  @UiField
  HTMLPanel editorPanel;

  @UiField
  Button clickToEdit;

  @UiField
  HTMLPanel viewPanel;

  @UiField
  Label viewLabel;

  @UiField
  Style style;

  boolean editing = false;

  private List<{{=proxy}}> values;

  private final List<{{=proxy}}> displayedList;

  public {{=className}}() {

    // Create the UI
    initWidget(GWT.<Binder>create(Binder.class).createAndBindUi(this));

    // Create the driver which manages the data-bound widgets
    Driver driver = GWT.<Driver>create(Driver.class);

   // Use a ListEditor that uses our NameLabelSource
    ListEditor<{{=proxy}}, NameLabel> listEditor = ListEditor.of(new NameLabelSource());

    // Configure the driver
    driver.initialize(listEditor);

    /*
     * Notice the backing list is essentially anonymous.
     */
    driver.display(new ArrayList<{{=proxy}}>());

    // Modifying this list triggers widget creation and destruction
    displayedList = listEditor.getList();

    editing = false;
  }

  @UiHandler("add")
  public void addClicked(ClickEvent e) {
  if (picker.getValue() == null){
		return;
	}
	for ({{=proxy}} proxy : displayedList) {
		if (proxy.{{=primaryPropGetter}}().equals(picker.getValue().{{=primaryPropGetter}}())) {
			return;
		}
	}
    displayedList.add(picker.getValue());
    viewLabel.setText(makeFlatList(displayedList));
  }

  @UiHandler("clickToEdit")
  public void clickToEditClicked(ClickEvent e) {
    toggleEditorMode();
  }

  @Override
  public void flush() {
  }

  @Override
  public List<{{=proxy}}> getValue() {
    if (values == null && displayedList.size() == 0) {
      return null;
    }
    return new ArrayList<{{=proxy}}>(displayedList);
  }

  public void onLoad() {
    makeEditable(false);
  }

  @Override
  public void onPropertyChange(String... strings) {
  }

  public void setAcceptableValues(Collection<{{=proxy}}> proxies) {
    picker.setAcceptableValues(proxies);
  }

  @Override
  public void setDelegate(
      EditorDelegate<List<{{=proxy}}>> editorDelegate) {
  }

  @Override
  public void setValue(List<{{=proxy}}> values) {
    this.values = values;
    makeEditable(editing = false);
    if (displayedList != null) {
      displayedList.clear();
      if (values != null) {
		  for ({{=proxy}} e : values) {
			displayedList.add(e);
		  }
		}
    }
    viewLabel.setText(makeFlatList(values));
  }

  private void makeEditable(boolean editable) {
    if (editable) {
      editorPanel.setStylePrimaryName(style.editorPanelVisible());
      viewPanel.setStylePrimaryName(style.viewPanelHidden());
      clickToEdit.setText("Done");
    } else {
      editorPanel.setStylePrimaryName(style.editorPanelHidden());
      viewPanel.setStylePrimaryName(style.viewPanelVisible());
      clickToEdit.setText("Edit");
    }
  }

  private String makeFlatList(Collection<{{=proxy}}> values) {
    return CollectionRenderer.of({{=proxyRenderer}}.instance())
        .render(values);
  }

  private void toggleEditorMode() {
    editing = !editing;
    makeEditable(editing);
  }
}
