package {{=packageName}};

import com.google.gwt.i18n.client.DateTimeFormat;
import com.google.gwt.i18n.client.NumberFormat;
import com.google.gwt.safehtml.shared.SafeHtml;
import com.google.gwt.safehtml.shared.SafeHtmlBuilder;
import com.google.gwt.safehtml.shared.SafeHtmlUtils;
import com.google.gwt.text.client.DateTimeFormatRenderer;
import com.google.gwt.text.shared.AbstractRenderer;
import com.google.gwt.text.shared.AbstractSafeHtmlRenderer;
import com.google.gwt.text.shared.Renderer;

{{#imports}}import {{=import}};
{{/imports}}
import java.util.HashSet;
import java.util.Set;

/**
 * {@link MobileProxyListView} specialized to {@link {{=name}}Key} values.
 */
public class {{=className}} extends MobileProxyListView<{{=proxy}}> {

	/**
	 * The renderer used to render cells.
	 */
	private static class CellRenderer extends AbstractSafeHtmlRenderer<{{proxy}}> {
		private final String dateStyle = ScaffoldMobileApp.getMobileListResources().cellListStyle().dateProp();
		private final String secondaryStyle = ScaffoldMobileApp.getMobileListResources().cellListStyle().secondaryProp();
		private final Renderer<{{=proxy}}> primaryRenderer = {{=proxyRenderer}}.instance();
		{{#mobileProperties}}
		private final Renderer<{{=propType}}> {{=propRendererName}} = {{=propRenderer}};
		{{/mobileProperties}}

		@Override
		public SafeHtml render({{=proxy}} value) {
			if (value == null) {
				return SafeHtmlUtils.EMPTY_SAFE_HTML;
			}

			// Primary property.
			SafeHtmlBuilder sb = new SafeHtmlBuilder();
			{{=primaryPropBuilder}}

			// Secondary property.
			sb.appendHtmlConstant("<div style=\"position:relative;\">");
			sb.appendHtmlConstant("<div class=\"" + secondaryStyle + "\">");
			{{=secondaryPropBuilder}}
			sb.appendHtmlConstant("</div>");

			// Date property.
			sb.appendHtmlConstant("<div class=\"" + dateStyle + "\">");
			{{=datePropBuilder}}
			sb.appendHtmlConstant("</div>");
			sb.appendHtmlConstant("</div>");

			return sb.toSafeHtml();
		}
	}

	private static {{=className}} instance;

	private final Set<String> paths = new HashSet<String>();

	public static {{=className}} instance() {
		if (instance == null) {
			instance = new {{=className}}();
		}

		return instance;
	}

	public {{=className}}() {
		super("New {{=name}}", new CellRenderer());
		init();
	}

	public void init() {
	    {{#mobileProperties}}
		paths.add("{{=prop}}");{{/mobileProperties}}
    }

	public String[] getPaths() {
		return paths.toArray(new String[paths.size()]);
	}
}
