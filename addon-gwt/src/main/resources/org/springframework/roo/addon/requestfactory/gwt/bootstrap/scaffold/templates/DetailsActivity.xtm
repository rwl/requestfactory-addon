package {{=packageName}};

import com.google.gwt.activity.shared.AbstractActivity;
import com.google.gwt.event.shared.EventBus;
import com.google.gwt.place.shared.Place;
import com.google.gwt.place.shared.PlaceController;
import com.google.web.bindery.requestfactory.shared.EntityProxy;
import com.google.web.bindery.requestfactory.shared.EntityProxyId;
import com.google.web.bindery.requestfactory.shared.Receiver;
import com.google.web.bindery.requestfactory.shared.Request;
import com.google.gwt.user.client.ui.AcceptsOneWidget;

import {{=placePackage}}.ProxyPlace;
import {{=placePackage}}.ProxyListPlace;
import {{=placePackage}}.ProxyPlace.Operation;
import {{=placePackage}}.ProxyDetailsView.ConfirmationCallback;
{{#imports}}import {{=import}};
{{/imports}}
import java.util.Set;

/**
 * An {@link com.google.gwt.activity.shared.Activity Activity} that requests and
 * displays detailed information on a given {{=proxy}}.
 */
public class {{=className}} extends AbstractActivity implements {{=detailsView}}.Delegate, {{=isScaffoldMobileActivity}} {

	private final ApplicationRequestFactory requests;
	private final PlaceController placeController;
	private final {{=detailsView}} view;
  	private final EntityProxyId<{{=proxy}}> proxyId;
	private AcceptsOneWidget display;
    private final String parentId;

	public {{=className}}(EntityProxyId<{{=proxy}}> proxyId, ApplicationRequestFactory requests, PlaceController placeController, {{=detailsView}} view, String parentId) {
		this.placeController = placeController;
		this.proxyId = proxyId;
		this.requests = requests;
		view.setDelegate(this);
		this.view = view;
		this.parentId = parentId;
	}

	public void deleteClicked() {
		view.confirm("Really delete this entry? You cannot undo this change.", new ConfirmationCallback() {

			@Override
			public void confirm() {
				requests.{{=nameUncapitalized}}Request().{{=removeMethodSignature}}(view.getValue()).fire(new Receiver<Void>() {

					public void onSuccess(Void ignore) {
						if (display == null) {
							return;
						}
						placeController.goTo(getBackButtonPlace());
					}
				});
			}

			@Override
			public void cancel() {
			}
		});
	}

	public void editClicked() {
		placeController.goTo(getEditButtonPlace());
	}

	public Place getBackButtonPlace() {
		return new ProxyListPlace({{=proxy}}.class, parentId);
	}

	public String getBackButtonText() {
		return "Back";
	}

	public Place getEditButtonPlace() {
		return new ProxyPlace(view.getValue().stableId(), Operation.EDIT, parentId);
	}

	public String getTitleText() {
		return "View {{=name}}";
	}

	public boolean hasEditButton() {
		return true;
	}

	public void onCancel() {
		onStop();
	}

	public void onStop() {
		display = null;
	}

	public void start(AcceptsOneWidget displayIn, EventBus eventBus) {
   	this.display = displayIn;
   	Receiver<EntityProxy> callback = new Receiver<EntityProxy>() {
      public void onSuccess(EntityProxy proxy) {
        if (proxy == null) {
            // Deleted entity, bad bookmark, that kind of thing
            placeController.goTo(getBackButtonPlace());
            return;
        }
        if (display == null) {
   	  		return;
   			}
  		  view.setValue(({{=proxy}}) proxy);
        display.setWidget(view);
      }
    };

     find(callback);
	}

	private void find(Receiver<EntityProxy> callback) {
	    requests.find(proxyId).with({{=proxyFields}}).fire(callback);
	}
}
