package {{=packageName}};

import com.google.gwt.core.client.GWT;
import com.google.gwt.dom.client.SpanElement;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.i18n.client.DateTimeFormat;
import com.google.gwt.i18n.client.NumberFormat;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.uibinder.client.UiHandler;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.HTMLPanel;
import com.google.gwt.user.client.ui.Widget;
import com.google.gwt.user.client.ui.Label;
import com.github.gwtbootstrap.client.ui.Button;

import {{=placePackage}}.ProxyListView;
import {{=placePackage}}.ProxyDetailsView.ConfirmationCallback;
import {{=topLevelPackage}}.messages.ApplicationMessages;
{{#imports}}import {{=import}};
{{/imports}}
/**
 * Details view for {{=proxy}}.
 */
public class {{=className}} extends Composite implements {{=detailsView}} {
    interface Binder extends UiBinder<HTMLPanel, {{=className}}> {}

    private static final Binder BINDER = GWT.create(Binder.class);

    private static {{=className}} instance;

    private ApplicationMessages applicationMessages = GWT.create(ApplicationMessages.class);
    
    private {{=proxyMessages}} messages = GWT.create({{=proxyMessages}}.class);

    {{=proxy}} proxy;
    {{#properties}}
    @UiField Label {{=prop}};{{/properties}}
    {{#properties}}
    @UiField HTMLPanel {{=prop}}Label;{{/properties}}

    @UiField SpanElement displayRenderer;
    @UiField Button edit;
    @UiField Button delete;
    {{#visualized}}@UiField {{/visualized}}Button view;

    private Delegate delegate;

    public static {{=className}} instance() {
        if (instance == null) {
            instance = new {{=className}}();
        }

        return instance;
    }

    public {{=className}}() {
        initWidget(BINDER.createAndBindUi(this));
        initLabels();
        this.edit.setText(applicationMessages.edit());
        this.delete.setText(applicationMessages.delete());{{#visualized}}
        this.view.setText(applicationMessages.visualize());{{/visualized}}
    }
    
    private void initLabels() {{{#properties}}
        {{=prop}}Label.add(new HTMLPanel(messages.{{=prop}}() +  ":"));{{/properties}}
    }

    public Widget asWidget() {
        return this;
    }

    public void confirm(String msg, ConfirmationCallback callback) {
        if (Window.confirm(msg)) {
            callback.confirm();
        } else {
            callback.cancel();
        }
    }

    public {{=proxy}} getValue() {
        return proxy;
    }

    @UiHandler("delete")
    public void onDeleteClicked(ClickEvent e) {
        delegate.deleteClicked();
    }

    @UiHandler("edit")
    public void onEditClicked(ClickEvent e) {
        delegate.editClicked();
    }

    {{#visualized}}@UiHandler("view"){{/visualized}}
    public void onViewClicked(ClickEvent e) {
        delegate.viewClicked();
    }

    public void setDelegate(Delegate delegate) {
        this.delegate = delegate;
    }

    public void setValue({{=proxy}} proxy) {
        this.proxy = proxy;
        {{#managedProperties}}
        {{=prop}}.setText(proxy.{{=propGetter}}() == null ? "" : {{=propFormatter}}(proxy.{{=propGetter}}()));
        {{/managedProperties}}

        displayRenderer.setInnerText({{=proxyRenderer}}.instance().render(proxy));
    }
}
