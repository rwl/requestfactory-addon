package {{=packageName}};

import com.google.gwt.activity.shared.Activity;
import com.google.gwt.activity.shared.ActivityMapper;
import com.google.gwt.place.shared.PlaceController;
import com.google.gwt.place.shared.Place;
import com.google.inject.Inject;
import com.google.web.bindery.requestfactory.shared.EntityProxyId;
import com.google.web.bindery.requestfactory.shared.RequestContext;
import com.google.web.bindery.requestfactory.shared.Receiver;

import {{=placePackage}}.ProxyPlace;
import {{=topLevelPackage}}.activity.AsyncActivityProxyProvider;

{{#imports}}import {{=import}};
{{/imports}}

/**
 * Maps {@link ProxyPlace} instances to the {@link Activity} to run.
 */
public class {{=className}} implements ActivityMapper {

    @Inject AsyncActivityProxyProvider<{{=name}}DetailsActivity> {{=nameUncapitalized}}DetailsActivityProvider;

    @Inject AsyncActivityProxyProvider<{{=name}}EditActivityWrapper> {{=nameUncapitalized}}EditActivityProvider;

    @Inject AsyncActivityProxyProvider<{{=name}}CreateActivityWrapper> {{=nameUncapitalized}}CreateActivityProvider;

    @Inject AsyncActivityProxyProvider<{{=name}}VisualizeActivity> {{=nameUncapitalized}}VisualizeActivityProvider;

    public Activity getActivity(Place place) {
        if (!(place instanceof ProxyPlace)) {
            return null;
        }
        ProxyPlace proxyPlace = (ProxyPlace) place;
        switch(proxyPlace.getOperation()) {
            case DETAILS:
                return {{=nameUncapitalized}}DetailsActivityProvider.get();
            case EDIT:
                return {{=nameUncapitalized}}EditActivityProvider.get();
            case CREATE:
                return {{=nameUncapitalized}}CreateActivityProvider.get();
            case VISUALIZE:
                return {{=nameUncapitalized}}VisualizeActivityProvider.get();
        }
        throw new IllegalArgumentException("Unknown operation " + proxyPlace.getOperation());
    }
}
