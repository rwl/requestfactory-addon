package {{=packageName}};

import com.google.gwt.core.client.GWT;
import com.google.gwt.dom.client.DivElement;
import com.google.gwt.dom.client.Element;
import com.google.gwt.dom.client.Style.Display;
import com.google.gwt.editor.client.EditorError;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.shared.EventBus;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.web.bindery.requestfactory.gwt.client.RequestFactoryEditorDriver;
import com.google.web.bindery.requestfactory.shared.RequestFactory;
import com.google.gwt.safehtml.shared.SafeHtmlBuilder;
import com.google.gwt.text.shared.AbstractRenderer;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.uibinder.client.UiHandler;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.HTMLPanel;
import com.googlecode.mgwt.ui.client.widget.MCheckBox;
import com.googlecode.mgwt.ui.client.widget.MDoubleBox;
import com.googlecode.mgwt.ui.client.widget.MIntegerBox;
import com.googlecode.mgwt.ui.client.widget.MLongBox;
import com.googlecode.mgwt.ui.client.widget.MTextBox;
import com.googlecode.mgwt.ui.client.widget.MTextArea;
import com.googlecode.mgwt.ui.client.widget.MPasswordTextBox;
import com.googlecode.mgwt.ui.client.widget.MDateBox;
import com.googlecode.mgwt.dom.client.event.touch.HasTouchHandlers;
import com.googlecode.mgwt.dom.client.event.touch.TouchStartEvent;
import com.googlecode.mgwt.dom.client.event.touch.TouchStartHandler;
import com.googlecode.mgwt.ui.client.dialog.Dialogs;
import com.googlecode.mgwt.ui.client.widget.Button;
import com.googlecode.mgwt.ui.client.widget.HeaderButton;
import com.googlecode.mgwt.ui.client.widget.LayoutPanel;
import com.github.gwtbootstrap.client.ui.ValueListBox;

import {{=scaffoldUiPackage}}.ui.*;

import {{=placePackage}}.ProxyEditView;
{{#imports}}import {{=import}};
{{/imports}}

import java.util.Collection;
import java.util.List;

/**
 * Edit view for {{=name}} proxys.
 */
public class {{=className}} extends Composite implements {{=editActivityWrapper}}.View<{{=className}}> {

    interface Binder extends UiBinder<LayoutPanel, {{=className}}> {
    }

    interface Driver extends
        RequestFactoryEditorDriver<{{=proxy}}, {{=className}}> {
    }

    private static final Binder BINDER = GWT.create(Binder.class);

    private static {{=className}} instance;

    public static {{=className}} instance() {
        if (instance == null) {
            instance = new {{=className}}();
        }
        return instance;
    }

    private ApplicationMessages messages = GWT.create(ApplicationMessages.class);

    {{#mobileEditViewProps}}
    {{=prop}};{{/mobileEditViewProps}}
    @UiField Button save;
    @UiField HeaderButton cancel;

    @UiField @Ignore HTML title;

    private Delegate delegate;

    private HandlerRegistration saveRegistration;

    public {{=className}}() {
        initWidget(BINDER.createAndBindUi(this));
        addSaveHandler();
        cancel.addTouchStartHandler(new TouchStartHandler() {

            @Override
            public void onTouchStart(TouchStartEvent event) {
                {{=className}}.this.delegate.cancelClicked();
            }
        });
        this.cancel.setText(messages.cancel());
        this.save.setText(messages.save());
    }

    @Override
    public RequestFactoryEditorDriver<{{=proxy}}, {{=className}}> createEditorDriver() {
        RequestFactoryEditorDriver<{{=proxy}}, {{=className}}> driver = GWT.create(Driver.class);
        driver.initialize(this);
        return driver;
    }

    {{#setEnumValuePickers}}
    {{=setValuePicker}}{{/setEnumValuePickers}}

    {{#setProxyValuePickers}}
    {{=setValuePicker}}{{/setProxyValuePickers}}

    public void setCreating(boolean creating) {
	    title.setHTML(creating ? messages.create() : messages.edit());
    }

    public void setDelegate(Delegate delegate) {
        this.delegate = delegate;
    }

    private void addSaveHandler() {
        saveRegistration = save.addTouchStartHandler(new TouchStartHandler() {
            @Override
            public void onTouchStart(TouchStartEvent event) {
                {{=className}}.this.delegate.saveClicked();
            }
        });
    }

    public void setEnabled(boolean enabled) {
        if (enabled && saveRegistration == null) {
            addSaveHandler();
        } else if (saveRegistration != null) {
            saveRegistration.removeHandler();
            saveRegistration = null;
        }
    }

    public void showErrors(List<EditorError> errors) {
        if (errors.size() == 0) return;
        SafeHtmlBuilder b = new SafeHtmlBuilder();
        for (int i = 0; i < errors.size(); i++) {
        EditorError error = errors.get(i);
            b.appendEscaped(error.getPath()).appendEscaped(": ");
            b.appendEscaped(error.getMessage());
            if (i < errors.size() - 1) b.appendEscaped(", ");
        }
        Dialogs.alert("Error", b.toSafeHtml().asString(), null);
    }
}
