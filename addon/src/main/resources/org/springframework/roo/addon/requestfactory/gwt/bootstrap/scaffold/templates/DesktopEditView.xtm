package {{=packageName}};

import com.google.gwt.core.client.GWT;
import com.google.gwt.dom.client.DivElement;
import com.google.gwt.dom.client.Element;
import com.google.gwt.dom.client.Style.Display;
import com.google.gwt.editor.client.EditorError;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.shared.EventBus;
import com.google.web.bindery.requestfactory.shared.RequestFactory;
import com.google.web.bindery.requestfactory.gwt.client.RequestFactoryEditorDriver;
import com.google.gwt.safehtml.shared.SafeHtmlBuilder;
import com.google.gwt.text.shared.AbstractRenderer;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.uibinder.client.UiHandler;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.HTMLPanel;
import com.google.gwt.view.client.AsyncDataProvider;
import com.github.gwtbootstrap.client.ui.Button;
import com.github.gwtbootstrap.client.ui.CheckBox;
import com.github.gwtbootstrap.client.ui.DoubleBox;
import com.github.gwtbootstrap.client.ui.IntegerBox;
import com.github.gwtbootstrap.client.ui.LongBox;
import com.github.gwtbootstrap.client.ui.TextBox;
import com.github.gwtbootstrap.client.ui.TextArea;
import com.github.gwtbootstrap.client.ui.PasswordTextBox;
import com.github.gwtbootstrap.client.ui.ValueListBox;
import com.github.gwtbootstrap.client.ui.Button;
import com.github.gwtbootstrap.client.ui.AlertBlock;
import com.github.gwtbootstrap.datepicker.client.ui.DateBox;
import com.github.gwtbootstrap.client.ui.SubmitButton;
import com.github.gwtbootstrap.client.ui.ControlLabel;

import {{=topLevelPackage}}.messages.ApplicationMessages;
{{#imports}}import {{=import}};
{{/imports}}

import java.util.Collection;
import java.util.List;

/**
 * Edit view for {{=proxy}}.
 */
public class {{=className}} extends Composite implements {{=editActivityWrapper}}.View<{{=className}}> {

    interface Binder extends UiBinder<HTMLPanel, {{=className}}> {
    }

    interface Driver extends
      RequestFactoryEditorDriver<{{=proxy}}, {{=className}}> {
    }

    private static final Binder BINDER = GWT.create(Binder.class);

    private static {{=className}} instance;

    private ApplicationMessages applicationMessages = GWT.create(ApplicationMessages.class);
    
    private {{=proxyMessages}} messages = GWT.create({{=proxyMessages}}.class);

    {{#editViewProps}}
    {{=prop}};{{/editViewProps}}
    {{#editableProperties}}
    @UiField(provided = true) ControlLabel {{=prop}}Label;{{/editableProperties}}

    @UiField Button cancel;
    @UiField SubmitButton save;
    @UiField AlertBlock errors;

    @UiField Element title;

    private Delegate delegate;

    public static {{=className}} instance() {
        if (instance == null) {
            instance = new {{=className}}();
        }
        return instance;
    }

    public {{=className}}() {
        initLabels();
        initWidget(BINDER.createAndBindUi(this));
        this.cancel.setText(applicationMessages.cancel());
        this.save.setText(applicationMessages.save());
    }
    
    private void initLabels() {{{#editableProperties}}
        this.{{=prop}}Label = new ControlLabel(messages.{{=prop}}() +  ":");{{/editableProperties}}
    }

    @Override
    public RequestFactoryEditorDriver<{{=proxy}}, {{=className}}> createEditorDriver() {
        RequestFactoryEditorDriver<{{=proxy}}, {{=className}}> driver = GWT.create(Driver.class);
        driver.initialize(this);
        return driver;
    }

{{#setEnumValuePickers}}{{=setValuePicker}}{{/setEnumValuePickers}}

{{#setProxyProviders}}{{=setProvider}}{{/setProxyProviders}}

    public void setCreating(boolean creating) {
        if (creating) {
            title.setInnerText(messages.create{{=name}}());
        } else {
            title.setInnerText(messages.edit{{=name}}());
        }
    }

    public void setDelegate(Delegate delegate) {
        this.delegate = delegate;
    }

    public void setEnabled(boolean enabled) {
        save.setEnabled(enabled);
    }

    public void showErrors(List<EditorError> errors) {
        SafeHtmlBuilder b = new SafeHtmlBuilder();
        for (EditorError error : errors) {
            b.appendEscaped(error.getPath()).appendEscaped(": ");
            b.appendEscaped(error.getMessage());
        }

        String text = b.toSafeHtml().asString();
        if (text.isEmpty()) {
            this.errors.setVisible(false);
        } else {
            this.errors.setText(text);
            this.errors.setVisible(true);
        }
    }

    @UiHandler("cancel")
    void onCancel(ClickEvent event) {
        delegate.cancelClicked();
    }

    @UiHandler("save")
    void onSave(ClickEvent event) {
        delegate.saveClicked();
    }
}
