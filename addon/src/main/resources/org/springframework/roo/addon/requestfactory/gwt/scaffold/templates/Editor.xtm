package {{=packageName}};

import java.util.Collection;
import java.util.Set;

import {{=topLevelPackage}}.managed.ui.renderer.{{=proxy}}Renderer;
import {{=scaffoldUiPackage}}.ProxyPicker;
import {{=scaffoldUiPackage}}.CollectionCallback;

import com.github.gwtbootstrap.client.ui.Button;
import com.google.gwt.core.client.GWT;
import com.google.gwt.editor.client.EditorDelegate;
import com.google.gwt.editor.client.LeafValueEditor;
import com.google.gwt.editor.client.ValueAwareEditor;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.uibinder.client.UiHandler;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.Widget;
import com.google.gwt.view.client.AsyncDataProvider;

{{#imports}}import {{=import}};
{{/imports}}


public class {{=className}} extends Composite implements ValueAwareEditor<{{=proxy}}>, LeafValueEditor<{{=proxy}}> {

    interface Binder extends UiBinder<Widget, {{=className}}> {
    }

    @UiField
    Button clickToEdit;

    private final ProxyPicker<{{=proxy}}> proxyPicker = new ProxyPicker<{{=proxy}}>({{=proxy}}Renderer.instance(), "Set ", true, new CollectionCallback<{{=proxy}}>() {

        @Override
        public void callback(Collection<{{=proxy}}> collection) {
            if (collection.iterator().hasNext()) {
                value = collection.iterator().next();
            }
        }
    });

    private {{=proxy}} value;

    public SpeciesEditor() {
        initWidget(GWT.<Binder> create(Binder.class).createAndBindUi(this));
    }

    public void setProvider(AsyncDataProvider<{{=proxy}}> provider) {

    }

    @UiHandler("clickToEdit")
    public void clickToEditClicked(ClickEvent e) {
        proxyPicker.show();
    }

    @Override
    public {{=proxy}} getValue() {
        return value;
    }

    @Override
    public void setValue({{=proxy}} value) {
        this.value = value;
    }

    @Override
    public void setDelegate(EditorDelegate<{{=proxy}}> delegate) {
    }

    @Override
    public void flush() {
    }

    @Override
    public void onPropertyChange(String... paths) {
    }
}
