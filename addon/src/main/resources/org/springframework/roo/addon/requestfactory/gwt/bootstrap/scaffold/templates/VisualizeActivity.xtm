package {{=packageName}};

import com.google.gwt.activity.shared.AbstractActivity;
import com.google.gwt.event.shared.EventBus;
import com.google.gwt.place.shared.Place;
import com.google.gwt.place.shared.PlaceController;
import com.google.web.bindery.requestfactory.shared.EntityProxy;
import com.google.web.bindery.requestfactory.shared.EntityProxyId;
import com.google.web.bindery.requestfactory.shared.Receiver;
import com.google.web.bindery.requestfactory.shared.Request;
import com.google.gwt.user.client.ui.AcceptsOneWidget;
import com.google.inject.Inject;

import {{=placePackage}}.ProxyPlace;
import {{=placePackage}}.ProxyListPlace;
import {{=placePackage}}.ProxyPlace.Operation;
import {{=placePackage}}.ProxyDetailsView.ConfirmationCallback;
import {{=desktopUiPackage}}.{{=name}}DesktopVisualizeView;
import {{=mobileUiPackage}}.{{=name}}MobileVisualizeView;

{{#imports}}import {{=import}};
{{/imports}}
import java.util.Set;

/**
 * An {@link com.google.gwt.activity.shared.Activity Activity} that requests and
 * displays a visualization on a given {{=proxy}}.
 */
public class {{=className}} extends AbstractActivity implements {{=visualizeView}}.Delegate {

    private final ApplicationRequestFactory requests;
    private final PlaceController placeController;
    private final {{=visualizeView}} view;
    private final EntityProxyId<{{=proxy}}> proxyId;
    private AcceptsOneWidget display;
    private final String parentId;

    @Inject
    public {{=className}}(ApplicationRequestFactory requests, PlaceController placeController) {
        this.placeController = placeController;
        ProxyPlace proxyPlace = (ProxyPlace) placeController.getWhere();
        this.proxyId = coerceId(proxyPlace);
        this.requests = requests;
        this.view = Application.isMobile() ? {{=name}}MobileVisualizeView.instance() : {{=name}}DesktopVisualizeView.instance();
        view.setDelegate(this);
        this.parentId = proxyPlace.getParentId();
    }

    @SuppressWarnings("unchecked")
    private EntityProxyId<{{=proxy}}> coerceId(ProxyPlace place) {
        return (EntityProxyId<{{=proxy}}>) place.getProxyId();
    }

    @Override
    public void editClicked() {
        placeController.goTo(new ProxyPlace(view.getValue().stableId(), Operation.EDIT, parentId));
    }

    @Override
    public void onCancel() {
        onStop();
    }

    @Override
    public void onStop() {
        display = null;
    }

    @Override
    public void start(AcceptsOneWidget displayIn, EventBus eventBus) {
        this.display = displayIn;
        final Receiver<EntityProxy> callback = new Receiver<EntityProxy>() {
            public void onSuccess(EntityProxy proxy) {
                if (proxy == null) {
                    // Deleted entity, bad bookmark, that kind of thing
                    placeController.goTo(new ProxyListPlace({{=proxy}}.class, parentId));
                    return;
                }
                if (display == null) {
                    return;
                }
                view.setValue(({{=proxy}}) proxy);
                display.setWidget(view);
            }
        };
        find(callback);
    }

    private void find(Receiver<EntityProxy> callback) {
        requests.find(proxyId).with({{=proxyFields}}).fire(callback);
    }
}
