package {{=packageName}};

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Collection;
import java.util.List;
import java.util.Set;

import {{=topLevelPackage}}.client.managed.ui.renderer.{{=proxy}}Renderer;
import {{=scaffoldUiPackage}}.CollectionEditor;
import {{=scaffoldUiPackage}}.ProxyPicker;
import {{=scaffoldUiPackage}}.CollectionCallback;

import com.github.gwtbootstrap.client.ui.Button;
import com.google.gwt.core.client.GWT;
import com.google.gwt.editor.client.EditorDelegate;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.uibinder.client.UiHandler;
import com.google.gwt.user.client.ui.Widget;
import com.google.gwt.view.client.AsyncDataProvider;
import com.google.gwt.view.client.ListDataProvider;
import com.google.gwt.editor.client.LeafValueEditor;
import com.google.gwt.editor.client.ValueAwareEditor;
import com.google.gwt.user.client.ui.Composite;

{{#imports}}import {{=import}};
{{/imports}}

/**
 * Displays an editor for a List of {{=proxy}} objects.
 */
public class {{=className}} extends Composite implements ValueAwareEditor<List<{{=proxy}}>>, LeafValueEditor<List<{{=proxy}}>> {

    interface Binder extends UiBinder<Widget, {{=className}}> {
    }

    @UiField
    Button clickToEdit;

    @UiField
    Button clickToAdd;

    private List<{{=proxy}}> values;

    private final CollectionEditor<{{=proxy}}> collectionEditor = new CollectionEditor<{{=proxy}}>(
            {{=proxy}}Renderer.instance(), "Edit {{=plural}}", true, new CollectionCallback<{{=proxy}}>() {

                @Override
                public void callback(Collection<{{=proxy}}> values) {
                    {{=className}}.this.values = new ArrayList<{{=proxy}}>(values);
                }
            });

    private final ProxyPicker<{{=proxy}}> proxyPicker = new ProxyPicker<{{=proxy}}>({{=proxy}}Renderer.instance(),
            "Add {{=plural}}", false, new CollectionCallback<{{=proxy}}>() {

                @Override
                public void callback(Collection<{{=proxy}}> added) {
                    values.addAll(added);
                }
            });

    public {{=className}}() {
        initWidget(GWT.<Binder> create(Binder.class).createAndBindUi(this));
    }

    @UiHandler("clickToEdit")
    public void clickToEditClicked(ClickEvent e) {
        List<{{=proxy}}> displayedList = new ArrayList<{{=proxy}}>();
        if (values != null) {
            for ({{=proxy}} proxy : values) {
                displayedList.add(proxy);
            }
        }
        collectionEditor.setProvider(new ListDataProvider<{{=proxy}}>(displayedList));
        collectionEditor.show();
    }

    @UiHandler("clickToAdd")
    public void clickToAddClicked(ClickEvent e) {
        proxyPicker.show();
    }

    @Override
    public void flush() {
    }

    @Override
    public List<{{=proxy}}> getValue() {
        if (values == null) {
            return null;
        }
        return new ArrayList<{{=proxy}}>(values);
    }

    @Override
    public void onPropertyChange(String... strings) {
    }

    public void setProvider(AsyncDataProvider<{{=proxy}}> provider) {
        proxyPicker.setProvider(provider);
    }

    @Override
    public void setDelegate(EditorDelegate<java.util.List<{{=proxy}}>> editorDelegate) {
    }

    @Override
    public void setValue(List<{{=proxy}}> values) {
        this.values = values;
    }
}
